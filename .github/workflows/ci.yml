name: Android Emulator Test

on: [push, pull_request]

jobs:
  android-setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt update && sudo apt install -y android-sdk adb qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils

      - name: Set up environment variables
        run: |
          echo "ANDROID_HOME=$HOME/usr/lib/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$HOME/usr/lib/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_AVD_HOME=$HOME/.config/.android/avd" >> $GITHUB_ENV
          echo "PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools" >> $GITHUB_ENV

      - name: Accept Android SDK Licenses
        run: yes | sdkmanager --licenses

      - name: Install Android SDK, Platform, and Emulator
        run: |
          sdkmanager "platform-tools" "platforms;android-30" "system-images;android-30;google_apis;x86_64" "ndk;27.1.12297006"

      - name: Create AVD
        run: |
          avdmanager create avd -n myPixel -k "system-images;android-30;google_apis;x86_64" --device "pixel_4"
          avdmanager list avd
      
      - name: KVM configuration
        run: |
          # Check if kvm group exists, create if necessary
          if ! getent group kvm; then
            sudo groupadd -r kvm
          fi
          # Add the current user to the kvm group
          sudo gpasswd -a $USER kvm
          # Add udev rule for KVM devices
          sudo bash -c 'echo "KERNEL==\"kvm\", GROUP=\"kvm\", MODE=\"0660\"" > /lib/udev/rules.d/50-udev-default.rules'
          sudo udevadm control --reload-rules
          # Ensure the KVM permissions are in place
          sudo chmod 666 /dev/kvm
          # Check if KVM is available
          kvm-ok

      - name: Start Android Emulator in Background
        run: |
          nohup emulator -avd myPixel -no-window -no-audio -no-snapshot-load &
          # Wait for any emulator to be listed as "device" (not "offline")
          until adb devices | grep -q "device"; do
            echo "Waiting for emulator to be online..."
            sleep 5
          done
          echo "Emulator is online and ready"
          adb devices

      - name: Setup Node.js
        uses: actions/setup-node@v4

      - name: Install npm dependencies
        run: npm install
      
      - name: Run npm start in the background
        run: |
          export ANDROID_HOME=/usr/lib/android-sdk
          export ANDROID_SDK_ROOT=/usr/lib/android-sdk
          export ANDROID_AVD_HOME=$HOME/.android/avd
          export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools
          yes | sdkmanager --licenses || true
          yes | sdkmanager.bat --licenses || true
          npm run e2e:android:build
          npm run e2e:android:install
  
      - name: Install maestro
        run: curl -fsSL "https://get.maestro.mobile.dev" | bash

      - name: Run Maestro Test
        run: maestro test ./maestro/hello.yaml
